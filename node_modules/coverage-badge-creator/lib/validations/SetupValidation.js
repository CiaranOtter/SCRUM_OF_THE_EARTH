"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetupValidation = void 0;
const FileUtils_1 = require("../utils/FileUtils");
const Globals_1 = require("../Globals");
class SetupValidation {
    static scan() {
        console.info('\nStep 2 -> Setup check process started');
        return Promise.all([
            this.checkFileExists(Globals_1.Globals.DEFAULT_COV_PATH, '❌ No Coverage file found', '✅ Coverage file exist'),
            this.checkFileExists(Globals_1.Globals.BASE_README_PATH, '❌ No README file found', '✅ README file exist')
        ])
            .then((messages) => {
            console.info(messages.join('\n'));
        })
            .catch((errors) => {
            console.error(errors);
        });
    }
    static async loadConfig() {
        console.info('\nStep 1 -> Loading Configurations process started');
        await Globals_1.Globals.loadArgv();
        const configExist = SetupValidation.checkIfConfigFileExists();
        if (!configExist)
            return;
        return this.parseConfig();
    }
    static parseConfig() {
        const fileBody = FileUtils_1.FileUtils.readFile(Globals_1.Globals.CONFIG_PATH);
        let config = null;
        return new Promise((resolve, reject) => {
            try {
                config = FileUtils_1.FileUtils.parseFile(fileBody);
                Globals_1.Globals.init(config);
            }
            catch (_a) {
                console.error(`❌ Parsing configuration file failed. Configuration is incorrect.`);
                reject();
            }
            resolve();
            console.info('✅ Configuration loaded');
        });
    }
    static checkIfConfigFileExists() {
        const fileExist = FileUtils_1.FileUtils.checkFileExist(Globals_1.Globals.CONFIG_PATH);
        if (!fileExist) {
            console.error(`❌ No Config file found\nSkip...`);
        }
        else {
            console.info(`✅ Config file exist`);
        }
        return !!fileExist;
    }
    static checkFileExists(path, rejectMessage, resolveMessage) {
        return new Promise((resolve, reject) => {
            const fileExist = FileUtils_1.FileUtils.checkFileExist(path);
            if (!fileExist)
                reject(rejectMessage);
            resolve(resolveMessage);
        });
    }
}
exports.SetupValidation = SetupValidation;
